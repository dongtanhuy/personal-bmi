{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","services/bmiCalculationService.js","components/Input/index.js","components/Input/Input.js","components/CurrentResult/index.js","components/CurrentResult/CurrentResult.js","components/BMIForm/index.js","components/BMIForm/BMIForm.js","components/History/index.js","components/History/History.js","components/Chart/index.js","components/Chart/Chart.js","components/App/App.js","components/App/index.js","services/localStorageService.js","serviceWorker.js","index.js"],"names":["Header","className","BMIToString","bmi","Input","onChange","value","label","placeholder","htmlFor","id","type","CurrentResult","weight","height","date","onSave","onReset","onClick","BMIForm","onSaveData","useState","setWeight","setHeight","setBMI","isShownResult","setIsShownResult","clearInput","isDisabledButton","Date","toLocaleString","split","onSubmit","e","preventDefault","heigthToMeter","toFixed","calculateBMI","target","disabled","newValue","uuidv4","History","data","length","map","item","index","key","Chart","width","margin","top","right","left","bottom","dataKey","angle","offset","position","strokeDasharray","stroke","activeDot","r","App","localStorage","JSON","parse","getItem","err","console","error","getData","state","setState","useEffect","setItem","stringify","storeData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f7e396f9.chunk.js","sourcesContent":["import Header from './Header';\n\nexport default Header;\n","import React from 'react';\nimport './Header.scss';\n\nconst Header = () => (\n  <h1 className=\"header\">Personal Body Mass Index Calculator</h1>\n);\n\nexport default Header;\n","export const calculateBMI = (weight, height) => {\n  const heigthToMeter = height / 100;\n  const bmi = (weight / (heigthToMeter * heigthToMeter)).toFixed(1);\n  return bmi;\n};\n\nexport const BMIToString = (bmi) => {\n  if (bmi < 18.5) {\n    return 'underweight';\n  } if (bmi >= 18.5 && bmi <= 24.9) {\n    return 'normal';\n  } if (bmi >= 25 && bmi <= 29.9) {\n    return 'overweight';\n  }\n  return 'obesity';\n};\n","import Input from './Input';\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Input.scss';\n\nconst Input = ({\n  onChange,\n  value,\n  label,\n  placeholder,\n}) => (\n  <div className=\"Input\">\n    <label className=\"Input__label\" htmlFor={label}>{label}</label>\n    <input className=\"Input__input\" id={label} type=\"number\" onChange={onChange} value={value} placeholder={placeholder} />\n  </div>\n);\n\n\nInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\nexport default Input;\n","import CurrentResult from './CurrentResult';\n\nexport default CurrentResult;","import React from 'react';\nimport { BMIToString } from 'services/bmiCalculationService';\nimport './CurrentResult.scss';\n\nconst CurrentResult = ({\n  weight,\n  height,\n  bmi,\n  date,\n  onSave,\n  onReset,\n}) => {\n  return (\n    <div className=\"CurrentResult\">\n      <div className=\"card CurrentResult__Wide\">\n        <div className=\"CurrentResult__ResultContainer\">\n          <span>Weight: {weight} kg</span>\n          <span>Height: {height} cm</span>\n          <span>Date: {date}</span>\n        </div>\n        <h2 className={`CurrentResult__Color ${BMIToString(bmi)}`}>BMI: {`${bmi} - ${BMIToString(bmi)}`}</h2>\n        <div className=\"CurrentResult__Buttons\">\n          <button onClick={onSave} className=\"button button-primary\">Save</button>\n          <button onClick={onReset} className=\"button button-secondary\">Reset</button>\n        </div>\n      </div>\n      <div className=\"card CurrentResult__Narrow\">\n        <h2>BMI Categories</h2>\n        <ul>\n          <li className=\"underweight\">\n            Underweight: <strong>{'less than 18.5'}</strong>\n          </li>\n          <li className=\"normal\">\n            Normal weight: <strong>{'18.5 - 24.9'}</strong>\n          </li>\n          <li className=\"overweight\">\n            Overweight: <strong>{'25 - 29.9'}</strong>\n          </li>\n          <li className=\"obesity\">\n            Obesity: <strong>{'30 or greater'}</strong>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default CurrentResult;\n","import BMIForm from './BMIForm';\n\nexport default BMIForm;\n","import React, { useState } from 'react';\nimport { calculateBMI } from 'services/bmiCalculationService';\nimport { v4 as uuidv4 } from 'uuid';\nimport Input from '../Input';\nimport CurrentResult from '../CurrentResult';\nimport './BMIForm.scss';\n\nconst BMIForm = ({ onSaveData }) => {\n  const [weight, setWeight] = useState('');\n  const [height, setHeight] = useState('');\n  const [bmi, setBMI] = useState('');\n  const [isShownResult, setIsShownResult] = useState(false);\n\n  const onChangeWeight = (value) => {\n    setWeight(value);\n  };\n  const onChangeHeight = (value) => {\n    setHeight(value);\n  };\n\n  const clearInput = () => {\n    setWeight('');\n    setHeight('');\n  };\n\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setBMI(calculateBMI(weight, height));\n    setIsShownResult(true);\n  };\n\n  const onResultSave = () => {\n    const newValue = {\n      id: uuidv4(),\n      weight,\n      height,\n      bmi,\n      date,\n    }\n    onSaveData(newValue)\n    clearInput();\n    setIsShownResult(false);\n  }\n\n  const onReset = () => {\n    clearInput();\n    setIsShownResult(false);\n  }\n\n  const validateInput = () => {\n    if (!weight || !height) {\n      return false;\n    }\n    if (weight < 0 || height < 0) {\n      return false;\n    }\n    return true;\n  };\n\n  const isDisabledButton = !validateInput();\n  const date = new Date().toLocaleString().split(',')[0];\n  return (\n    <>\n      <form className=\"BMIForm\" onSubmit={onSubmit}>\n        <Input placeholder=\"60\" value={weight} onChange={(e) => onChangeWeight(e.target.value)} label=\"Weight (kg)\" />\n        <Input placeholder=\"180\" value={height} onChange={(e) => onChangeHeight(e.target.value)} label=\"Height (cm)\" />\n        <button disabled={isDisabledButton} className={`BMIForm__button button ${isDisabledButton ? 'disabled' : 'button-primary'}`} type=\"submit\">Calculate</button>\n      </form>\n      { isShownResult && <CurrentResult onSave={onResultSave} onReset={onReset} date={date} weight={weight} height={height} bmi={bmi} /> }\n    </>\n  );\n};\n\nexport default BMIForm;\n","import History from './History';\n\nexport default History;\n","import React from 'react';\nimport { BMIToString } from 'services/bmiCalculationService';\n\nimport './History.scss';\n\nconst History = ({ data }) => {\n  const renderItem = () => {\n    return data.map((item, index) => (\n      <tr key={item.id}>\n        <td>{index+1}</td>\n        <td>\n          {item.date}\n        </td>\n        <td>\n          {item.weight}\n        </td>\n        <td>\n          {item.height}\n        </td>\n        <td>\n          {item.bmi}\n        </td>\n        <td>\n          {BMIToString(item.bmi)}\n        </td>\n      </tr>\n    ))\n  }\n  if (data.length === 0) {\n    return null\n  }\n  return (\n    <div className=\"History card\">\n      <h1>History</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>No.</th>\n            <th>Date</th>\n            <th>Weight (kg)</th>\n            <th>Heigh (cm)</th>\n            <th>BMI</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {renderItem()}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default History;","import Chart from './Chart';\n\nexport default Chart;\n","import React from 'react';\nimport {\n  Label, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  AreaChart, Area\n} from 'recharts';\n\nimport './Chart.scss';\n\n\nconst Chart = ({ data }) => {\n  return (\n    <div className=\"Chart card\">\n      <ResponsiveContainer\n        width={\"100%\"}\n        height={300}\n      >\n        <AreaChart\n          data={data}\n          margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n          }}\n        >\n          <XAxis dataKey=\"date\" />\n          <YAxis>\n            <Label angle={-90} offset={10} position=\"left\">BMI</Label>\n          </YAxis>\n          <Tooltip />\n          <Legend />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Area type=\"monotone\" dataKey=\"bmi\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  )\n}\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport { getData, storeData } from 'services/localStorageService';\nimport Header from '../Header';\nimport BMIForm from '../BMIForm';\nimport History from '../History';\nimport Chart from '../Chart';\nimport './App.scss';\n\nfunction App() {\n  const initState = () => getData('data') || [];\n  const [state, setState] = useState(initState);\n  useEffect(() => {\n    storeData('data', state)\n  },[state])\n\n  const onSaveData = value => {\n    setState([...state, value])\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <BMIForm onSaveData={onSaveData} />\n      <History data={state} />\n      <Chart data={state} />\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","export const getData = (key) => {\n\tif (!localStorage) return;\n\n\ttry {\n\t\treturn JSON.parse(localStorage.getItem(key));\n\t} catch (err) {\n\t\tconsole.error(`Error getting item ${key} from localStorage`, err);\n\t}\n};\n\nexport const storeData = (key, item) => {\n\tif (!localStorage) return;\n\n\ttry {\n\t\treturn localStorage.setItem(key, JSON.stringify(item));\n\t} catch (err) {\n\t\tconsole.error(`Error storing item ${key} to localStorage`, err);\n\t}\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}